with raw_data as (
    select 
        coalesce(event.value:sport_event.id::string, 'unknown') as event_id,
        event.value:sport_event.start_time::timestamp_ntz as start_time, 
        coalesce(event.value:sport_event.start_time_confirmed::boolean, false) as start_time_confirmed,
        coalesce(event.value:sport_event.sport_event_context.sport.id::string, 'unknown') as sport_id,
        coalesce(event.value:sport_event.sport_event_context.sport.name::string, 'unknown') as sport_name,
        coalesce(event.value:sport_event.sport_event_context.category.id::string, 'unknown') as category_id,
        coalesce(event.value:sport_event.sport_event_context.category.name::string, 'unknown') as category_name,
        coalesce(event.value:sport_event.sport_event_context.competition.id::string, 'unknown') as competition_id,
        coalesce(event.value:sport_event.sport_event_context.competition.name::string, 'unknown') as competition_name,
        coalesce(event.value:sport_event.sport_event_context.competition.gender::string, 'unknown') as gender,
        coalesce(event.value:sport_event.sport_event_context.season.id::string, 'unknown') as season_id,
        coalesce(event.value:sport_event.sport_event_context.season.name::string, 'unknown') as season_name,
        event.value:sport_event.sport_event_context.season.start_date::date as season_start_date,
        event.value:sport_event.sport_event_context.season.end_date::date as season_end_date,
        coalesce(event.value:sport_event.sport_event_context.season.year::string, 'unknown') as year,
        coalesce(event.value:sport_event.sport_event_context.stage.order::int, 0) as stage_order,
        coalesce(event.value:sport_event.sport_event_context.stage.type::string, 'unknown') as stage_type,
        coalesce(event.value:sport_event.sport_event_context.stage.phase::string, 'unknown') as phase,
        event.value:sport_event.sport_event_context.stage.start_date::date as stage_start_date,
        event.value:sport_event.sport_event_context.stage.end_date::date as stage_end_date,
        coalesce(event.value:sport_event.sport_event_context.stage.year::string, 'unknown') as stage_year,
        coalesce(event.value:sport_event.sport_event_context.round.name::string, 'unknown') as round_name,
        coalesce(event.value:sport_event.sport_event_context.round.cup_round_sport_event_number::int, 0) as cup_round_sport_event_number,
        coalesce(event.value:sport_event.sport_event_context.round.cup_round_number_of_sport_events::int, 0) as cup_round_number_of_sport_events,
        coalesce(event.value:sport_event.sport_event_context.round.cup_round_id::string, 'unknown') as cup_round_id,
        coalesce(event.value:sport_event.sport_event_context.groups[0].id::string, 'unknown') as group_id,
        coalesce(event.value:sport_event.sport_event_context.groups[0].name::string, 'unknown') as group_name,
        coalesce(competitor.value:name::string, 'unknown') as competitor_name,
        coalesce(competitor.value:country::string, 'unknown') as country,
        coalesce(competitor.value:abbreviation::string, 'unknown') as abbreviation,
        coalesce(competitor.value:qualifier::string, 'unknown') as qualifier,
        coalesce(event.value:sport_event.venue.id::string, 'unknown') as venue_id,
        coalesce(event.value:sport_event.venue.name::string, 'unknown') as venue_name,
        coalesce(event.value:sport_event.venue.capacity::int, 0) as capacity,
        coalesce(event.value:sport_event.venue.city_name::string, 'unknown') as city_name,
        coalesce(event.value:sport_event.venue.country_name::string, 'unknown') as venue_country_name,
        coalesce(event.value:sport_event.venue.map_coordinates::string, 'unknown') as map_coordinates,
        coalesce(event.value:sport_event.venue.country_code::string, 'unknown') as country_code,
        coalesce(event.value:sport_event.venue.timezone::string, 'unknown') as timezone,
        coalesce(event.value:sport_event.sport_event_conditions.attendance.count::int, 0) as attendance,
        coalesce(event.value:sport_event.sport_event_conditions.weather.pitch_conditions::string, 'unknown') as pitch_weather_conditions,
        coalesce(event.value:sport_event.sport_event_conditions.weather.overall_conditions::string, 'unknown') as overall_weather_conditions,
        coalesce(event.value:sport_event.sport_event_conditions.ground.neutral::boolean, false) as neutral_ground,
        coalesce(event.value:sport_event.sport_event_conditions.lineups.confirmed::boolean, false) as lineups_confirmed,
        coalesce(referee.value:id::string, 'unknown') as referee_id,
        coalesce(referee.value:name::string, 'unknown') as referee_name,
        coalesce(referee.value:nationality::string, 'unknown') as nationality,
        coalesce(referee.value:type::string, 'unknown') as type,
        coalesce(event.value:sport_event_status.status::string, 'unknown') as status,
        coalesce(event.value:sport_event_status.match_status::string, 'unknown') as match_status,
        coalesce(event.value:sport_event_status.home_score::int, 0) as home_score,
        coalesce(event.value:sport_event_status.away_score::int, 0) as away_score,
        coalesce(event.value:sport_event_status.winner_id::string, 'unknown') as winner_id,        
        coalesce(event.value:sport_event_status.aggregate_home_score::int, 0) as aggregate_home_score,
        coalesce(event.value:sport_event_status.aggregate_away_score::int, 0) as aggregate_away_score,
        coalesce(event.value:sport_event_status.aggregate_winner_id::string, 'unknown') as aggregate_winner_id,        
        coalesce(event.value:sport_event_status.period_scores.match_tie::boolean, false) as match_tie,        
        coalesce(team.value:statistics.ball_possession::int, 0) as team_ball_possession,
        coalesce(team.value:statistics.cards_given::int, 0) as team_cards_given,
        coalesce(team.value:statistics.chances_created::int, 0) as team_chances_created,
        coalesce(team.value:statistics.clearances::int, 0) as team_clearances,
        coalesce(team.value:statistics.corner_kicks::int, 0) as team_corner_kicks,
        coalesce(team.value:statistics.crosses_successful::int, 0) as team_crosses_successful,
        coalesce(team.value:statistics.crosses_total::int, 0) as team_crosses_total,
        coalesce(team.value:statistics.crosses_unsuccessful::int, 0) as team_crosses_unsuccessful,
        coalesce(team.value:statistics.defensive_blocks::int, 0) as team_defensive_blocks,
        coalesce(team.value:statistics.diving_saves::int, 0) as team_diving_saves,
        coalesce(team.value:statistics.dribbles_completed::int, 0) as team_dribbles_completed,
        coalesce(team.value:statistics.fouls::int, 0) as team_fouls,
        coalesce(team.value:statistics.free_kicks::int, 0) as team_free_kicks,
        coalesce(team.value:statistics.goal_kicks::int, 0) as team_goal_kicks,
        coalesce(team.value:statistics.interceptions::int, 0) as team_interceptions,
        coalesce(team.value:statistics.long_passes_successful::int, 0) as team_long_passes_successful,
        coalesce(team.value:statistics.long_passes_total::int, 0) as team_long_passes_total,
        coalesce(team.value:statistics.long_passes_unsuccessful::int, 0) as team_long_passes_unsuccessful,
        coalesce(team.value:statistics.loss_of_possession::int, 0) as team_loss_of_possession,
        coalesce(team.value:statistics.offsides::int, 0) as team_offsides,
        coalesce(team.value:statistics.passes_successful::int, 0) as team_passes_successful,
        coalesce(team.value:statistics.passes_total::int, 0) as team_passes_total,
        coalesce(team.value:statistics.passes_unsuccessful::int, 0) as team_passes_unsuccessful,
        coalesce(team.value:statistics.red_cards::int, 0) as team_red_cards,
        coalesce(team.value:statistics.shots_blocked::int, 0) as team_shots_blocked,
        coalesce(team.value:statistics.shots_off_target::int, 0) as team_shots_off_target,
        coalesce(team.value:statistics.shots_on_target::int, 0) as team_shots_on_target,
        coalesce(team.value:statistics.shots_saved::int, 0) as team_shots_saved,
        coalesce(team.value:statistics.shots_total::int, 0) as team_shots_total,
        coalesce(team.value:statistics.substitutions::int, 0) as team_substitutions,
        coalesce(team.value:statistics.tackles_successful::int, 0) as team_tackles_successful,
        coalesce(team.value:statistics.tackles_total::int, 0) as team_tackles_total,
        coalesce(team.value:statistics.tackles_unsuccessful::int, 0) as team_tackles_unsuccessful,
        coalesce(team.value:statistics.throw_ins::int, 0) as team_throw_ins,
        coalesce(team.value:statistics.was_fouled::int, 0) as team_was_fouled,
        coalesce(team.value:statistics.yellow_cards::int, 0) as team_yellow_cards,
        coalesce(team.value:statistics.yellow_red_cards::int, 0) as team_yellow_red_cards,
        coalesce(player.value:id::string, 'unknown') as player_id,
        coalesce(player.value:name::string, 'unknown') as player_name,
        coalesce(player.value:starter::boolean, false) as starter, 
        coalesce(player.value:statistics.assists::int, 0) as assists,
        coalesce(player.value:statistics.chances_created::int, 0) as chances_created,
        coalesce(player.value:statistics.clearances::int, 0) as clearances,
        coalesce(player.value:statistics.corner_kicks::int, 0) as corner_kicks,
        coalesce(player.value:statistics.crosses_successful::int, 0) as crosses_successful,
        coalesce(player.value:statistics.crosses_total::int, 0) as crosses_total,
        coalesce(player.value:statistics.defensive_blocks::int, 0) as defensive_blocks,
        coalesce(player.value:statistics.diving_saves::int, 0) as diving_saves,
        coalesce(player.value:statistics.dribbles_completed::int, 0) as dribbles_completed,
        coalesce(player.value:statistics.fouls_committed::int, 0) as fouls_committed,
        coalesce(player.value:statistics.goals_by_head::int, 0) as goals_by_head,
        coalesce(player.value:statistics.goals_by_penalty::int, 0) as goals_by_penalty,
        coalesce(player.value:statistics.goals_conceded::int, 0) as goals_conceded,
        coalesce(player.value:statistics.goals_scored::int, 0) as goals_scored,
        coalesce(player.value:statistics.interceptions::int, 0) as interceptions,
        coalesce(player.value:statistics.long_passes_successful::int, 0) as long_passes_successful,
        coalesce(player.value:statistics.long_passes_total::int, 0) as long_passes_total,
        coalesce(player.value:statistics.long_passes_unsuccessful::int, 0) as long_passes_unsuccessful,
        coalesce(player.value:statistics.loss_of_possession::int, 0) as loss_of_possession,
        coalesce(player.value:statistics.minutes_played::int, 0) as minutes_played,
        coalesce(player.value:statistics.offsides::int, 0) as offsides,
        coalesce(player.value:statistics.own_goals::int, 0) as own_goals,
        coalesce(player.value:statistics.passes_successful::int, 0) as passes_successful,
        coalesce(player.value:statistics.passes_total::int, 0) as passes_total,
        coalesce(player.value:statistics.passes_unsuccessful::int, 0) as passes_unsuccessful,
        coalesce(player.value:statistics.penalties_faced::int, 0) as penalties_faced,
        coalesce(player.value:statistics.penalties_missed::int, 0) as penalties_missed,
        coalesce(player.value:statistics.penalties_saved::int, 0) as penalties_saved,
        coalesce(player.value:statistics.red_cards::int, 0) as red_cards,
        coalesce(player.value:statistics.shots_blocked::int, 0) as shots_blocked,
        coalesce(player.value:statistics.shots_faced_saved::int, 0) as shots_faced_saved,
        coalesce(player.value:statistics.shots_faced_total::int, 0) as shots_faced_total,
        coalesce(player.value:statistics.shots_off_target::int, 0) as shots_off_target,
        coalesce(player.value:statistics.shots_on_target::int, 0) as shots_on_target,
        coalesce(player.value:statistics.substituted_in::int, 0) as substituted_in,
        coalesce(player.value:statistics.substituted_out::int, 0) as substituted_out,
        coalesce(player.value:statistics.tackles_successful::int, 0) as tackles_successful,
        coalesce(player.value:statistics.tackles_total::int, 0) as tackles_total,
        coalesce(player.value:statistics.was_fouled::int, 0) as was_fouled,
        coalesce(player.value:statistics.yellow_cards::int, 0) as yellow_cards,
        coalesce(player.value:statistics.yellow_red_cards::int, 0) as yellow_red_cards
    from {{ source('liverpool', 'sportradar_data') }},
    lateral flatten(input => data:summaries) event,
    lateral flatten(input => event.value:sport_event.competitors) competitor,
    lateral flatten(input => event.value:sport_event.sport_event_conditions.referees) referee,
    lateral flatten(input => event.value:statistics.totals.competitors) team,
    lateral flatten(input => team.value:players) player
)

select 
    event_id,
    start_time, 
    start_time_confirmed,
    sport_id,
    sport_name,
    category_id,
    category_name,
    competition_id,
    competition_name,
    gender,
    season_id,
    season_name,
    season_start_date,
    season_end_date,
    year,
    stage_order,
    stage_type,
    phase,
    stage_start_date,
    stage_end_date,
    stage_year,
    round_name,
    cup_round_sport_event_number,
    cup_round_number_of_sport_events,
    cup_round_id,
    group_id,
    group_name,
    competitor_name,
    country,
    abbreviation,
    qualifier,
    venue_id,
    venue_name,
    capacity,
    city_name,
    venue_country_name,
    map_coordinates,
    referee_id,
    referee_name,
    nationality,
    country_code,
    type,
    attendance,
    pitch_weather_conditions,
    overall_weather_conditions,
    neutral_ground,
    lineups_confirmed,
    status,
    match_status,
    home_score,
    away_score,
    winner_id,
    aggregate_home_score,
    aggregate_away_score,
    aggregate_winner_id,
    match_tie,
    team_ball_possession,
    team_cards_given,
    team_chances_created,
    team_clearances,
    team_corner_kicks,
    team_crosses_successful,
    team_crosses_total,
    team_crosses_unsuccessful,
    team_defensive_blocks,
    team_diving_saves,
    team_dribbles_completed,
    team_fouls,
    team_free_kicks,
    team_goal_kicks,
    team_interceptions,
    team_long_passes_successful,
    team_long_passes_total,
    team_long_passes_unsuccessful,
    team_loss_of_possession,
    team_offsides,
    team_passes_successful,
    team_passes_total,
    team_passes_unsuccessful,
    team_red_cards,
    team_shots_blocked,
    team_shots_off_target,
    team_shots_on_target,
    team_shots_saved,
    team_shots_total,
    team_substitutions,
    team_tackles_successful,
    team_tackles_total,
    team_tackles_unsuccessful,
    team_throw_ins,
    team_was_fouled,
    team_yellow_cards,
    team_yellow_red_cards,
    player_id,
    player_name,
    starter,
    assists,
    chances_created,
    clearances,
    corner_kicks,
    crosses_successful,
    crosses_total,
    defensive_blocks,
    diving_saves,
    dribbles_completed,
    fouls_committed,
    goals_by_head,
    goals_by_penalty,
    goals_conceded,
    goals_scored,
    interceptions,
    long_passes_successful,
    long_passes_total,
    long_passes_unsuccessful,
    loss_of_possession,
    minutes_played,
    offsides,
    own_goals,
    passes_successful,
    passes_total,
    passes_unsuccessful,
    penalties_faced,
    penalties_missed,
    penalties_saved,
    red_cards,
    shots_blocked,
    shots_faced_saved,
    shots_faced_total,
    shots_off_target,
    shots_on_target,
    substituted_in,
    substituted_out,
    tackles_successful,
    tackles_total,
    was_fouled,
    yellow_cards,
    yellow_red_cards
from raw_data

